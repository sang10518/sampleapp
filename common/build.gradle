apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'
android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "common_${variant.name}_${defaultConfig.versionName}.aar"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "server"
    productFlavors {
        def DEV_SERVER_ADDRESS = "\"http://1.1.1.1:1111\""
        def QA_SERVER_ADDRESS = "\"http://1.1.1.1:1111\""
        def PROD_SERVER_ADDRESS = "\"http://1.1.1.1:1111\""

        Dev {
            dimension "server"
            buildConfigField("String", "SERVER_IP", DEV_SERVER_ADDRESS)
        }

        QA {
            dimension "server"
            buildConfigField("String", "SERVER_IP", QA_SERVER_ADDRESS)
        }

        Prod {
            dimension "server"
            buildConfigField("String", "SERVER_IP", PROD_SERVER_ADDRESS)
        }

    }

    variantFilter { variant ->
        def dim = variant.flavors.collectEntries {
            [(it.productFlavor.dimension): it.productFlavor.name]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


    publishing {
        publications {
            android.libraryVariants.all { variant ->
                "${variant.name}"(MavenPublication) {

                    // Artifact properties
                    def manifest = new XmlSlurper().parse(project.android.sourceSets.main.manifest.srcFile);
                    def libVersion = manifest['@android:versionName'].text()
                    def artifactName = variant.name

                    groupId 'com.swc.common'
                    version = defaultConfig.versionName
                    artifactId artifactName
                    artifact "build/outputs/aar/common_${variant.name}_${version}.aar"

                    //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }


        }

    }
}



dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api 'androidx.core:core-ktx:1.3.0'
    api 'androidx.appcompat:appcompat:1.1.0'
    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    api "androidx.recyclerview:recyclerview:1.1.0"
    api 'com.trello.rxlifecycle4:rxlifecycle-android:4.0.0'
    api 'com.trello.rxlifecycle4:rxlifecycle-components:4.0.0'
    api "io.reactivex.rxjava3:rxjava:3.0.4"
    api 'com.google.code.gson:gson:2.8.6'
    api 'com.android.support:multidex:1.0.3'
    api "androidx.work:work-runtime-ktx:$work_version"
    api 'androidx.webkit:webkit:1.2.0'
    api 'org.apache.httpcomponents:httpcore:4.4.4'
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    api 'com.squareup.okhttp3:okhttp:3.11.0'
    api 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
